let hasLab = false;
let credit = 3;
let roundFigure = 100;

let table4thColumn = "---(generated by extension)---";

let gainedMarksRaw = {};
let markWeights = {};
let gainedMarks = {};
let tables = {};
let finalMarks = {};

function startMarkCalculation(){
    getMetaData();
    getTables();

    calculateWeights();
    calculateMarks();
    calculateFinalMarks();

    showFinalMarks();
    addRowsToTable();
}

function getMetaData(){
    let tableContainers = document.getElementsByClassName("table-responsive quiz_listing")[0];
    if (tableContainers === undefined) return;
    let credit_element = document.getElementsByClassName("col-md-4 column page_title_container")[0].getElementsByTagName("h5")[0];
    credit = parseInt(credit_element.textContent.charAt(credit_element.textContent.length - 1));
    let tableHeadings = tableContainers.getElementsByTagName("div");
    for (let i = 0; i < tableHeadings.length; i++) {
        if (tableHeadings[i].textContent === "Lab Sessional 1"
            || tableHeadings[i].textContent === "Lab Assignments"
            || tableHeadings[i].textContent === "Lab Sessional 2"
        ) {
            hasLab = true;
            break;
        }
    }
}

function getTables() {
    let tableContainers = document.getElementsByClassName("table-responsive quiz_listing")[0];
    if (!tableContainers) return;
    let markType;
    // Loops through Tables
    for (let i = 0; i < tableContainers.childNodes.length; i += 1){
        if (tableContainers.childNodes[i].tagName === "DIV"){
            markType = tableContainers.childNodes[i].textContent;
        }
        if (tableContainers.childNodes[i].className === "table table-striped table-bordered table-hover"){
            let table = tableContainers.childNodes[i];
            tables[markType] = table;
            let tableRows = table.getElementsByTagName("tbody")[0].getElementsByTagName("tr");
            // Loops through Table Rows
            for (let j = 0; j < tableRows.length; j++){
                let markTitle = tableRows[j].getElementsByTagName("td")[0].textContent
                let singleMarksObtained = parseFloat(tableRows[j].getElementsByTagName("td")[1].textContent);
                let singleTotalMarks = parseFloat(tableRows[j].getElementsByTagName("td")[2].textContent);
                gainedMarksRaw[markTitle] = [singleMarksObtained, singleTotalMarks];
            }
        }
    }
}

function calculateWeights(){

    if (!hasLab){
        markWeights["Total"] = 100
        markWeights["TotalLab"] = 0

        markWeights["Quizzes"] = {}
        markWeights["Quizzes"].weight_grand_total = 15;
        markWeights["Quizzes"].weight_sub_total = 15;
        markWeights["Quizzes"].weight_single_marks = 15/4;

        markWeights["Assignments"] = {}
        markWeights["Assignments"].weight_grand_total = 10;
        markWeights["Assignments"].weight_sub_total = 10;
        markWeights["Assignments"].weight_single_marks = 10/4;

        markWeights["Lab Assignments"] = {}
        markWeights["Lab Assignments"].weight_grand_total = 0;
        markWeights["Lab Assignments"].weight_sub_total = 0;
        markWeights["Lab Assignments"].weight_single_marks = 0;

        markWeights["Sessional1"] = {}
        markWeights["Sessional1"].weight_grand_total = 10;
        markWeights["Sessional1"].weight_sub_total = 10;
        markWeights["Sessional1"].weight_single_marks = 10;

        markWeights["Sessional2"] = {}
        markWeights["Sessional2"].weight_grand_total = 15;
        markWeights["Sessional2"].weight_sub_total = 15;
        markWeights["Sessional2"].weight_single_marks = 15;


        markWeights["LabSessional1"] = {}
        markWeights["LabSessional1"].weight_grand_total = 0;
        markWeights["LabSessional1"].weight_sub_total = 0;
        markWeights["LabSessional1"].weight_single_marks = 0;

        markWeights["LabSessional2"] = {}
        markWeights["LabSessional2"].weight_grand_total = 0;
        markWeights["LabSessional2"].weight_sub_total = 0;
        markWeights["LabSessional2"].weight_single_marks = 0;

        markWeights["MidTermMarks"] = {}
        markWeights["MidTermMarks"].weight_grand_total = 25;
        markWeights["MidTermMarks"].weight_sub_total = 25;
        markWeights["MidTermMarks"].weight_single_marks = 25;

        markWeights["Midterm lab"] = {}
        markWeights["Midterm lab"].weight_grand_total = 0;
        markWeights["Midterm lab"].weight_sub_total = 0;
        markWeights["Midterm lab"].weight_single_marks = 0;

        markWeights["Final"] = {}
        markWeights["Final"].weight_grand_total = 50;
        markWeights["Final"].weight_sub_total = 50;
        markWeights["Final"].weight_single_marks = 50;

        markWeights["FinalLab"] = {}
        markWeights["FinalLab"].weight_grand_total = 0;
        markWeights["FinalLab"].weight_sub_total = 0;
        markWeights["FinalLab"].weight_single_marks = 0;

    } else{
        markWeights["Total"] = 100 * ((credit-1)/credit)
        markWeights["TotalLab"] = 100 * (1/credit)

        markWeights["Quizzes"] = {}
        markWeights["Quizzes"].weight_grand_total = 15 * ((credit-1) / credit);
        markWeights["Quizzes"].weight_sub_total = 15;
        markWeights["Quizzes"].weight_single_marks = (15 * ((credit-1) / credit))/4;

        markWeights["Assignments"] = {}
        markWeights["Assignments"].weight_grand_total = 10 * ((credit-1) / credit);
        markWeights["Assignments"].weight_sub_total = 10;
        markWeights["Assignments"].weight_single_marks = (10 * ((credit-1) / credit))/4;

        markWeights["Lab Assignments"] = {}
        markWeights["Lab Assignments"].weight_grand_total = 25 * (1 / credit);
        markWeights["Lab Assignments"].weight_sub_total = 25;
        markWeights["Lab Assignments"].weight_single_marks = (25 * (1 / credit))/4;

        markWeights["Sessional1"] = {}
        markWeights["Sessional1"].weight_grand_total = 10 * ((credit-1) / credit);
        markWeights["Sessional1"].weight_sub_total = 10;
        markWeights["Sessional1"].weight_single_marks = 10 * ((credit-1) / credit);

        markWeights["Sessional2"] = {}
        markWeights["Sessional2"].weight_grand_total = 15 * ((credit-1) / credit);
        markWeights["Sessional2"].weight_sub_total = 15;
        markWeights["Sessional2"].weight_single_marks = 15 * ((credit-1) / credit);

        markWeights["LabSessional1"] = {}
        markWeights["LabSessional1"].weight_grand_total = 10 * (1 / credit);
        markWeights["LabSessional1"].weight_sub_total = 10;
        markWeights["LabSessional1"].weight_single_marks = 10 * (1 / credit);

        markWeights["LabSessional2"] = {}
        markWeights["LabSessional2"].weight_grand_total = 15 * (1 / credit);
        markWeights["LabSessional2"].weight_sub_total = 15;
        markWeights["LabSessional2"].weight_single_marks = 15 * (1 / credit);

        markWeights["MidTermMarks"] = {}
        markWeights["MidTermMarks"].weight_grand_total = 25 * ((credit-1) / credit);
        markWeights["MidTermMarks"].weight_sub_total = 25;
        markWeights["MidTermMarks"].weight_single_marks = 25 * ((credit-1) / credit);

        markWeights["Midterm lab"] = {}
        markWeights["Midterm lab"].weight_grand_total = 25 * (1 / credit);
        markWeights["Midterm lab"].weight_sub_total = 25;
        markWeights["Midterm lab"].weight_single_marks = 25 * (1 / credit);

        markWeights["Final"] = {}
        markWeights["Final"].weight_grand_total = 50 * ((credit-1) / credit);
        markWeights["Final"].weight_sub_total = 50;
        markWeights["Final"].weight_single_marks = 50 * ((credit-1) / credit);

        markWeights["FinalLab"] = {}
        markWeights["FinalLab"].weight_grand_total = 50 * (1 / credit);
        markWeights["FinalLab"].weight_sub_total = 50;
        markWeights["FinalLab"].weight_single_marks = 50 * (1 / credit);

    }
}

function calculateMarks(){
    calculateMarks_grouped("Assign", "Assignments")
    calculateMarks_grouped("LabAssign", "Lab Assignments")
    calculateMarks_grouped("Quiz", "Quizzes")
    calculateMarks_single("Sessional1")
    calculateMarks_single("Sessional2")
    calculateMarks_single("LabSessional1")
    calculateMarks_single("LabSessional2")
    calculateMarks_single("MidTermMarks")
    calculateMarks_single("Midterm lab")
    calculateMarks_single("Final")
    calculateMarks_single("FinalLab")

}

function calculateMarks_grouped(search, tableHeading) {
    gainedMarks[tableHeading] = {};
    let marksList = {}
    for (let marks in gainedMarksRaw){
        if (marks.startsWith(search))
            marksList[marks] = gainedMarksRaw[marks]
    }
    let marksCount = Object.keys(marksList).length;
    gainedMarks[tableHeading].accountedMarks = [0, 0]
    gainedMarks[tableHeading].intermediateMarks = [0, markWeights[tableHeading].weight_sub_total]
    gainedMarks[tableHeading].totalMarks = [0, markWeights[tableHeading].weight_grand_total]

    if (marksCount !== 0) {
        let total = 0;
        for (let mark in marksList) {
            total += (marksList[mark][0] / marksList[mark][1]) * 10
        }
        let average = total / marksCount;
        let intermediateAverage = average * markWeights[tableHeading].weight_sub_total / 10;
        let totalAverage = average * markWeights[tableHeading].weight_grand_total / 10;


        if (marksCount >= 4) {
            gainedMarks[tableHeading].accountedMarks = [totalAverage, markWeights[tableHeading].weight_grand_total];
            gainedMarks[tableHeading].intermediateMarks[0] = intermediateAverage;
            gainedMarks[tableHeading].totalMarks[0] = totalAverage;
        } else {
            gainedMarks[tableHeading].accountedMarks = [totalAverage * marksCount / 4, markWeights[tableHeading].weight_single_marks * marksCount];
            gainedMarks[tableHeading].intermediateMarks[0] = intermediateAverage;
            gainedMarks[tableHeading].totalMarks[0] = totalAverage;
        }
    }
}

function calculateMarks_single(identifier) {
    gainedMarks[identifier] = {}
    gainedMarks[identifier].accountedMarks = [0, 0];
    gainedMarks[identifier].intermediateMarks = [0, markWeights[identifier].weight_sub_total];
    gainedMarks[identifier].totalMarks = [0, markWeights[identifier].weight_grand_total];

    if (gainedMarksRaw.hasOwnProperty(identifier)) {
        let marks = gainedMarksRaw[identifier][0] * 10 / gainedMarksRaw[identifier][1]
        let intermediateAverage = marks * markWeights[identifier].weight_sub_total / 10
        let totalAverage = marks * markWeights[identifier].weight_grand_total / 10
        gainedMarks[identifier].accountedMarks = [totalAverage, markWeights[identifier].weight_grand_total];
        gainedMarks[identifier].intermediateMarks[0] = intermediateAverage;
        gainedMarks[identifier].totalMarks[0] = totalAverage;
    }
}

function calculateFinalMarks() {
    // initializing summed marks
    finalMarks.lab = [0, 0];
    finalMarks.theory = [0, 0];

    // initializing summed average marks
    finalMarks.labAverage = [0, 0];
    finalMarks.theoryAverage = [0, 0];

    // initializing total marks
    finalMarks.all = [0, 0];
    finalMarks.allAverage = [0, 0];

    // initializing summed marks (average)
    finalMarks.internal_lab = [0, 0];
    finalMarks.internal_theory = [0, 0];

    // initializing total marks (average)
    finalMarks.internal_labAverage = [0, 0];
    finalMarks.internal_theoryAverage = [0, 0];

    // initializing total marks (average)
    finalMarks.internal_all = [0, 0];
    finalMarks.internal_allAverage = [0, 0];

    // total average (out of 100)
    finalMarks.labTotalAverage = [0, 0];
    finalMarks.theoryTotalAverage = [0, 0];
    finalMarks.internal_labTotalAverage = [0, 0];
    finalMarks.internal_theoryTotalAverage = [0, 0];

    // adding marks
        // theory
    finalMarks.theory[0] += gainedMarks["Assignments"].accountedMarks[0];
    finalMarks.theory[1] += gainedMarks["Assignments"].accountedMarks[1];

    finalMarks.theory[0] += gainedMarks["Quizzes"].accountedMarks[0];
    finalMarks.theory[1] += gainedMarks["Quizzes"].accountedMarks[1];

    finalMarks.theory[0] += gainedMarks["MidTermMarks"].accountedMarks[0];
    finalMarks.theory[1] += gainedMarks["MidTermMarks"].accountedMarks[1];

    // finalMarks.theory[0] += gainedMarks["Sessional1"].accountedMarks[0];
    // finalMarks.theory[1] += gainedMarks["Sessional1"].accountedMarks[1];
    //
    // finalMarks.theory[0] += gainedMarks["Sessional2"].accountedMarks[0];
    // finalMarks.theory[1] += gainedMarks["Sessional2"].accountedMarks[1];

        // theory average
    finalMarks.theoryAverage[0] += gainedMarks["Assignments"].intermediateMarks[0];
    finalMarks.theoryAverage[1] += gainedMarks["Assignments"].intermediateMarks[1];

    finalMarks.theoryAverage[0] += gainedMarks["Quizzes"].intermediateMarks[0];
    finalMarks.theoryAverage[1] += gainedMarks["Quizzes"].intermediateMarks[1];

    finalMarks.theoryAverage[0] += gainedMarks["MidTermMarks"].intermediateMarks[0];
    finalMarks.theoryAverage[1] += gainedMarks["MidTermMarks"].intermediateMarks[1];

        // lab
    finalMarks.lab[0] += gainedMarks["Lab Assignments"].accountedMarks[0];
    finalMarks.lab[1] += gainedMarks["Lab Assignments"].accountedMarks[1];

    finalMarks.lab[0] += gainedMarks["Midterm lab"].accountedMarks[0];
    finalMarks.lab[1] += gainedMarks["Midterm lab"].accountedMarks[1];

        // lab average
    finalMarks.labAverage[0] += gainedMarks["Lab Assignments"].intermediateMarks[0];
    finalMarks.labAverage[1] += gainedMarks["Lab Assignments"].intermediateMarks[1];

    finalMarks.labAverage[0] += gainedMarks["Midterm lab"].intermediateMarks[0];
    finalMarks.labAverage[1] += gainedMarks["Midterm lab"].intermediateMarks[1];

    // finalMarks.lab[0] += gainedMarks["LabSessional1"].accountedMarks[0];
    // finalMarks.lab[1] += gainedMarks["LabSessional1"].accountedMarks[1];
    //
    // finalMarks.lab[0] += gainedMarks["LabSessional2"].accountedMarks[0];
    // finalMarks.lab[1] += gainedMarks["LabSessional2"].accountedMarks[1];

    // calculating internal marks
    finalMarks.internal_lab[0] = finalMarks.lab[0]
    finalMarks.internal_lab[1] = finalMarks.lab[1]
    finalMarks.internal_theory[0] = finalMarks.theory[0]
    finalMarks.internal_theory[1] = finalMarks.theory[1]

    finalMarks.internal_all[0] = finalMarks.internal_lab[0] + finalMarks.internal_theory[0];
    finalMarks.internal_all[1] = finalMarks.internal_lab[1] + finalMarks.internal_theory[1];

    // calculating internal averages
    finalMarks.internal_labTotalAverage[0] = finalMarks.labAverage[0];
    finalMarks.internal_labTotalAverage[1] = finalMarks.labAverage[1];
    finalMarks.internal_theoryTotalAverage[0] = finalMarks.theoryAverage[0];
    finalMarks.internal_theoryTotalAverage[1] = finalMarks.theoryAverage[1];


    finalMarks.internal_labAverage[1] = markWeights["TotalLab"]/2;
    if (hasLab)
        finalMarks.internal_labAverage[0] = (finalMarks.labAverage[0]/finalMarks.labAverage[1])*finalMarks.internal_labAverage[1]
    finalMarks.internal_theoryAverage[1] = markWeights["Total"]/2
    finalMarks.internal_theoryAverage[0] = (finalMarks.theoryAverage[0]/finalMarks.theoryAverage[1])*finalMarks.internal_theoryAverage[1]

    finalMarks.internal_allAverage[0] = finalMarks.internal_labAverage[0] + finalMarks.internal_theoryAverage[0];
    finalMarks.internal_allAverage[1] = finalMarks.internal_labAverage[1] + finalMarks.internal_theoryAverage[1];


    // adding final marks
    finalMarks.theory[0] += gainedMarks["Final"].accountedMarks[0];
    finalMarks.theory[1] += gainedMarks["Final"].accountedMarks[1];

    finalMarks.lab[0] += gainedMarks["FinalLab"].accountedMarks[0];
    finalMarks.lab[1] += gainedMarks["FinalLab"].accountedMarks[1];

    finalMarks.theoryAverage[0] += gainedMarks["Final"].intermediateMarks[0];
    finalMarks.theoryAverage[1] += gainedMarks["Final"].intermediateMarks[1];

    finalMarks.labAverage[0] += gainedMarks["FinalLab"].intermediateMarks[0];
    finalMarks.labAverage[1] += gainedMarks["FinalLab"].intermediateMarks[1];

    // calculating all
    finalMarks.all[0] = finalMarks.lab[0] + finalMarks.theory[0];
    finalMarks.all[1] = finalMarks.lab[1] + finalMarks.theory[1];

    // calculating final averages
    finalMarks.labTotalAverage[1] = 100;
    if (hasLab)
        finalMarks.labTotalAverage[0] = (finalMarks.labAverage[0]/finalMarks.labAverage[1])*finalMarks.labTotalAverage[1]
    finalMarks.theoryTotalAverage[1] =  100;
    finalMarks.theoryTotalAverage[0] = (finalMarks.theoryAverage[0]/finalMarks.theoryAverage[1])*finalMarks.theoryTotalAverage[1]


    if (hasLab)
        finalMarks.labAverage[0] = (finalMarks.labAverage[0] / finalMarks.labAverage[1]) *  markWeights["TotalLab"]
    finalMarks.labAverage[1] = markWeights["TotalLab"];
    finalMarks.theoryAverage[0] = (finalMarks.theoryAverage[0]/finalMarks.theoryAverage[1])*markWeights["Total"]
    finalMarks.theoryAverage[1] = markWeights["Total"]

    finalMarks.allAverage[0] = finalMarks.labAverage[0] + finalMarks.theoryAverage[0];
    finalMarks.allAverage[1] = finalMarks.labAverage[1] + finalMarks.theoryAverage[1];

}

function showFinalMarks(){

    let tableInitialized = false;
    let tableContent;

    function addFinalTableRow(value1, value2, value3) {
        if (!tableInitialized) {
            let tablesContainer = document.getElementsByClassName("table-responsive quiz_listing")[0];

            let tableHeader = document.createElement("div");
            tableHeader.style.cssText = "background:#13A89E;margin: 10px;text-align: center;padding: 10px;font-weight: bold;color: white;font-size: 16px;"
            tableHeader.innerText = "Total Marks (generated by extension)";

            let tableSubHeader = document.createElement("span")
            tableSubHeader.innerText = "press the button button on the right side of your address bar (with comsats logo) to customize"
            tableSubHeader.style.cssText = "display:block; text-align:center; font-size: 10px"
            tableHeader.appendChild(tableSubHeader)

            let table = document.createElement("table")
            table.className = "table table-striped table-bordered table-hover";
            table.innerHTML = "<thead><tr><th width=\"33%\">Title</th><th width=\"33%\">Obtained Marks</th><th width=\"\">Total Marks</th></tr></thead>"

            tableContent = document.createElement("tbody");

            tablesContainer.insertBefore(table, tablesContainer.firstChild)
            tablesContainer.insertBefore(tableHeader, tablesContainer.firstChild)
            table.appendChild(tableContent)
            tableInitialized = true;
        }
        let tableRow = document.createElement("tr");

        let tableColumn1 = document.createElement("td");
        let tableColumnValue1 = document.createTextNode(value1);
        tableColumn1.appendChild(tableColumnValue1)

        let tableColumn2 = document.createElement("td");
        let tableColumnValue2 = document.createTextNode(value2);
        tableColumn2.appendChild(tableColumnValue2)

        let tableColumn3 = document.createElement("td");
        let tableColumnValue3 = document.createTextNode(value3);
        tableColumn3.appendChild(tableColumnValue3)

        tableRow.appendChild(tableColumn1)
        tableRow.appendChild(tableColumn2)
        tableRow.appendChild(tableColumn3)

        tableContent.appendChild(tableRow)
    }

    if (hasLab) {

        // Theory
        // Show Total Theory Marks
        if (userSettingMarks.markSummary_marks_theory) addFinalTableRow("Theory Marks", (Math.round(finalMarks.theory[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.theory[1] * roundFigure) / roundFigure).toString())

        // Show Theory Average Marks (out of 100)
        if (userSettingMarks.markSummary_marks_theory_average) addFinalTableRow("Theory Marks (Average)", (Math.round(finalMarks.theoryTotalAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.theoryTotalAverage[1] * roundFigure) / roundFigure).toString())

        // Show Theory Weighted Average Marks (out of (credit-1)*100/credit)
        if (userSettingMarks.markSummary_marks_theory_weighted_average) addFinalTableRow("Theory Marks (Weighted Average)", (Math.round(finalMarks.theoryAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.theoryAverage[1] * roundFigure) / roundFigure).toString())

        // Show Internal Theory Accounted Marks
        if (userSettingMarks.markSummary_marks_internal_theory) addFinalTableRow("Internal Theory Marks (Accounted)", (Math.round(finalMarks.internal_theory[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.internal_theory[1] * roundFigure) / roundFigure).toString())

        // Show Internal Theory Average Marks (out of 100)
        if (userSettingMarks.markSummary_marks_internal_theory_average) addFinalTableRow("Internal Theory Marks (Average)", (Math.round(finalMarks.internal_theoryTotalAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.internal_theoryTotalAverage[1] * roundFigure) / roundFigure).toString())

        // Show Internal Theory Weighted Average Marks (out of (credit-1)*100/credit)
        if (userSettingMarks.markSummary_marks_internal_theory_weighted_average) addFinalTableRow("Internal Theory Marks (Weighted Average)", (Math.round(finalMarks.internal_theoryAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.internal_theoryAverage[1] * roundFigure) / roundFigure).toString())

        // Lab
        // Show Total Lab Marks
        if (userSettingMarks.markSummary_marks_lab) addFinalTableRow("Lab Marks", (Math.round(finalMarks.lab[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.lab[1] * roundFigure) / roundFigure).toString())

        // Show Lab Average Marks (out of 100)
        if (userSettingMarks.markSummary_marks_lab_average) addFinalTableRow("Lab Marks (Average)", (Math.round(finalMarks.labTotalAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.labTotalAverage[1] * roundFigure) / roundFigure).toString())

        // Show Lab Weighted Average Marks (out of (credit-1)*100/credit)
        if (userSettingMarks.markSummary_marks_lab_weighted_average) addFinalTableRow("Lab Marks (Weighted Average)", (Math.round(finalMarks.labAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.labAverage[1] * roundFigure) / roundFigure).toString())

        // Show Internal Lab Accounted Marks
        if (userSettingMarks.markSummary_marks_internal_lab) addFinalTableRow("Internal Lab Marks (Accounted)", (Math.round(finalMarks.lab[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.lab[1] * roundFigure) / roundFigure).toString())

        // Show Internal Lab Average Marks (out of 100)
        if (userSettingMarks.markSummary_marks_internal_lab_average) addFinalTableRow("Internal Lab Marks (Average)", (Math.round(finalMarks.internal_labTotalAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.internal_labTotalAverage[1] * roundFigure) / roundFigure).toString())

        // Show Internal Lab Weighted Average Marks (out of (credit-1)*100/credit)
        if (userSettingMarks.markSummary_marks_internal_lab_weighted_average) addFinalTableRow("Internal Lab Marks (Weighted Average)", (Math.round(finalMarks.internal_labAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.internal_labAverage[1] * roundFigure) / roundFigure).toString())
    }

    // Total
    // Show Total Marks
    if (userSettingMarks.markSummary_marks_total) addFinalTableRow("Total Marks", (Math.round(finalMarks.all[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.all[1] * roundFigure) / roundFigure).toString())

    // Show Total Average Marks
    if (userSettingMarks.markSummary_marks_total_average) addFinalTableRow("Total Marks (Average)", (Math.round(finalMarks.allAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.allAverage[1] * roundFigure) / roundFigure).toString())

    // Show Internal Marks
    if (userSettingMarks.markSummary_marks_internal_total) addFinalTableRow("Internal Marks", (Math.round(finalMarks.internal_all[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.internal_all[1] * roundFigure) / roundFigure).toString())

    // Show Internal Average Marks
    if (userSettingMarks.markSummary_marks_internal_total_average) addFinalTableRow("Internal Marks (Average)", (Math.round(finalMarks.internal_allAverage[0] * roundFigure) / roundFigure).toString(), (Math.round(finalMarks.internal_allAverage[1] * roundFigure) / roundFigure).toString())

}

function addRowsToTable() {
    let groupTableTitles = ["Assignments", "Quizzes", "Lab Assignments"];

    for (let title of groupTableTitles) {
        if (tables.hasOwnProperty(title)) {
            if (userSettingMarks.markSummary_tableData_accounted)
                addRow(tables[title], "Accounted", Math.round(gainedMarks[title].accountedMarks[0] * roundFigure) / roundFigure, Math.round(gainedMarks[title].accountedMarks[1] * roundFigure) / roundFigure, table4thColumn);
            if (hasLab && userSettingMarks.markSummary_tableData_intermediate)
                addRow(tables[title], "Average(in "+ (title.includes("Lab") || title.includes("lab") ? "Lab" : "Theory") +")", Math.round(gainedMarks[title].intermediateMarks[0] * roundFigure) / roundFigure, Math.round(gainedMarks[title].intermediateMarks[1] * roundFigure) / roundFigure, table4thColumn);
            if (userSettingMarks.markSummary_tableData_absolute)
                addRow(tables[title], "Average(Total)", Math.round(gainedMarks[title].totalMarks[0] * roundFigure) / roundFigure, Math.round(gainedMarks[title].totalMarks[1] * roundFigure) / roundFigure, table4thColumn);
        }
    }

    let singleTableTitles = ["Sessional 1", "Sessional 2", "Lab Sessional 1", "Lab Sessional 2", "Midterm Marks", "Lab Midterm Marks", "Final", "Final"];
    let singleTableIdentifiers = ["Sessional1", "Sessional2", "LabSessional1", "LabSessional2", "MidTermMarks", "Midterm lab", "Final", "FinalLab"];

    for (let index = 0; index < singleTableTitles.length; index ++) {
        if (tables.hasOwnProperty(singleTableTitles[index])) {
            // if (userSettingMarks.markSummary_tableData_accounted)
            // addRow(tables[singleTableTitles[index]], "Accounted", Math.round(gainedMarks[singleTableIdentifiers[index]].accountedMarks[0] * roundFigure) / roundFigure, Math.round(gainedMarks[singleTableIdentifiers[index]].accountedMarks[1] * roundFigure) / roundFigure, table4thColumn);
            if (hasLab && userSettingMarks.markSummary_tableData_intermediate)
                addRow(tables[singleTableTitles[index]], "Total (in "+ (singleTableIdentifiers[index].includes("Lab") || singleTableIdentifiers[index].includes("lab") ? "Lab" : "Theory") +")", Math.round(gainedMarks[singleTableIdentifiers[index]].intermediateMarks[0] * roundFigure) / roundFigure, Math.round(gainedMarks[singleTableIdentifiers[index]].intermediateMarks[1] * roundFigure) / roundFigure, table4thColumn);
            if (userSettingMarks.markSummary_tableData_absolute)
                addRow(tables[singleTableTitles[index]], "Total " + (singleTableIdentifiers[index].includes("FinalLab") ? " - Lab" : ""), Math.round(gainedMarks[singleTableIdentifiers[index]].totalMarks[0] * roundFigure) / roundFigure, Math.round(gainedMarks[singleTableIdentifiers[index]].totalMarks[1] * roundFigure) / roundFigure, table4thColumn);
        }
    }

}

function addRow(root, value1, value2, value3, value4) {
    root = root.getElementsByTagName("tbody")[0]
    let html_title = document.createTextNode(value1);
    let html_obtained_marks = document.createTextNode(value2);
    let html_total_marks = document.createTextNode(value3);
    let html_dud = document.createTextNode(value4);

    let html_title_column = document.createElement("td");
    let html_obtained_marks_column = document.createElement("td");
    let html_total_marks_column = document.createElement("td");
    let html_dud_column = document.createElement("td");

    html_title_column.appendChild(html_title);
    html_obtained_marks_column.appendChild(html_obtained_marks);
    html_total_marks_column.appendChild(html_total_marks);
    html_dud_column.appendChild(html_dud);

    let newRow = document.createElement("tr");

    newRow.appendChild(html_title_column);
    newRow.appendChild(html_obtained_marks_column);
    newRow.appendChild(html_total_marks_column);
    newRow.appendChild(html_dud_column);

    root.appendChild(newRow);
}

function removeDuplicateRows() {
    let tableTitles = ["Assignments"]
    let rowsToRemove = []
    for (let tableTitle of tableTitles) {
        if (tables.hasOwnProperty(tableTitle)) {
            let table = tables[tableTitle]
            let tableRows = table.getElementsByTagName("tbody")[0].getElementsByTagName("tr");
            // Loops through Table Rows
            for (let j = 0; j < tableRows.length; j++) {
                let markTitle = tableRows[j].getElementsByTagName("td")[0].textContent
                if (markTitle.toLowerCase().startsWith("lab") && !tableTitle.toLowerCase().includes("lab")) {
                    rowsToRemove.push(tableRows[j].id)
                }
            }
        }
    }

    for (let row of rowsToRemove) {
        removeElement(row)
    }

}

function removeElement(elementId) {
    let element = document.getElementById(elementId);
    element.parentNode.removeChild(element);
}

